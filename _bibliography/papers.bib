---
---

@inproceedings{10.1145/3563835.3567654,
author = {Potter, Hannah and Madadi, Ardi and Just, Ren\'{e} and Omar, Cyrus},
title = {Contextualized Programming Language Documentation},
year = {2022},
isbn = {9781450399098},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3563835.3567654},
doi = {10.1145/3563835.3567654},
abstract = {Learning the syntax and semantics of a new programming language is a challenge. It is common for learners to refer to language documentation many times and in many contexts as they build comfort and understanding. We review existing functional language documentation, finding that it tends to be organized according to the structure of the language. Each section interleaves narrative explanations, which introduce precise terminology that is then used consistently, with code examples. Sections often start with simpler special cases of a construct before considering it in full generality. To make use of language documentation, learners must step away from the code they are working with, e.g., in an exercise or tutorial, to locate and transfer knowledge from the documentation. We describe a system, ExplainThis, that automatically generates contextualized language documentation, structured based on our study of language documentation but specialized to the particular code at the cursor. This system is integrated into the structure editor of Hazel, a live functional environment. Documentation appears next to the editor and color is used as secondary notation to correlate the explanation with program terms. We also study syntactic and explanatory specificity with a formative user study. We find that participants desire documentation to be tailored to specific syntax of the code a user is working with, while allowing an adaptive level of specificity for code examples.},
booktitle = {Proceedings of the 2022 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {1â€“15},
numpages = {15},
keywords = {structure editing, programming education, functional programming, documentation},
location = {Auckland, New Zealand},
series = {Onward! 2022},
selected = true,
bibtex_show = true,
pdf = explainthis-onward22.pdf,
demo = https://hazel.org/build/explainthis/,
artifact = https://doi.org/10.6084/m9.figshare.21381864,
preview = onward.png,
}

@misc{hazeltutor,
      title={Hazel Tutor: Guiding Novices Through Type-Driven Development Strategies}, 
      author={Hannah Potter and Cyrus Omar},
      year={2020},
      url = {https://hazel.org/hazeltutor-hatra2020.pdf},
      abstract = {Hazel Tutor is a work-in-progress editor service for the Hazel programming environment designed to interactively help novices learn type-driven development strategies as they construct, edit, and debug code. The
system provides both feedback and, when requested, suggestions on the basis of type information available at
the cursor. Hazel is able to supply the Hazel Tutor with the necessary information at all times, including when
there are holes in the program. When the cursor is on an empty hole, the system organizes the suggestions
based on the type-driven development strategy that we aim to teach students. We are beginning to work on
presenting debugging strategies when on an error hole. We outline our hypotheses, specific research questions
of interest, and planned future studies.},
      bibtex_show = true,
      pdf = hazeltutor-hatra2020.pdf,
      demo = https://hazel.org/build/strategy-guide/index.html,
      preview = hatra.png,
}
